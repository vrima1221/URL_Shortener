{"version":3,"sources":["pages/NotFoundPage/NotFoundPage.tsx","api/fetchClient.ts","api/links.ts","components/ErrorNotification/ErrorNotification.tsx","components/URLForm/URLForm.tsx","components/URLInfo/URLInfo.tsx","components/URLTable/URLTable.tsx","pages/URLShortener/URLShortener.tsx","utils/shrinkURL.ts","pages/About/About.tsx","pages/URLInfoPage/URLInfoPage.tsx","App.tsx","index.tsx"],"names":["NotFoundPage","BASE_URL","request","url","method","data","options","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","catch","error","console","log","client","getLinkById","id","getAll","a","ErrorNotification","message","isError","className","hidden","URLForm","errorMessage","onChange","currentUrl","onSubmit","action","type","placeholder","value","e","target","URLInfo","onRemove","fullUrl","shortUrl","href","to","onClick","URLTable","urls","map","URLShortener","useState","urlsFromServer","setUrlsFromServer","setIsError","setErrorMessage","currentURL","setCurrentURL","showErrorMessage","setTimeout","getDataFromServer","useEffect","visibleUrls","useMemo","isURLAlreadyShrinked","some","event","preventDefault","trim","shortURL","replace","slice","preparedData","postOrPatchLink","addedUrl","prev","length","urlId","prevUrls","filter","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","About","URLInfoPage","useParams","loadInfo","UrlId","loadedUrlInfo","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ad41cfd.chunk.js","sourcesContent":["import React from 'react';\n\nexport const NotFoundPage: React.FC = () => {\n  return (\n    <h1>Page not found</h1>\n  );\n};\n","const BASE_URL = 'https://localhost:7097/ShortUrl';\n\ntype RequestMethod = 'GET' | 'POST' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    })\n    // eslint-disable-next-line no-console\n    .catch(error => console.log(error));\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { dataFromServer, URL } from '../types/URL';\nimport { client } from './fetchClient';\n\nexport const getLinkById = (id: string | undefined) => {\n  return client.get<dataFromServer>(`/Get?id=${id}`);\n};\n\nexport const getAll = async () => {\n  return client.get<any>('/GetAll');\n};\n\nexport const postOrPatchLink = (url: URL) => {\n  return client.post('/CreateEdit', { ...url });\n};\n\nexport const deleteLink = (id: number) => {\n  return client.delete(`/Delete?id=${id}`);\n};\n","import React from 'react';\nimport './ErrorNotification.scss';\n\ntype Props = {\n  message: string;\n  isError: boolean;\n};\n\nexport const ErrorNotification: React.FC<Props> = (\n  {\n    message,\n    isError,\n  },\n) => {\n  return (\n    <div\n      className=\"error-notification\"\n      hidden={!isError}\n    >\n      {message}\n    </div>\n  );\n};\n","import React from 'react';\nimport { ErrorNotification } from '../ErrorNotification/ErrorNotification';\n\ntype Props = {\n  isError: boolean\n  errorMessage: string\n  onChange: (value: string) => void\n  currentUrl: string\n  onSubmit: (event: React.FormEvent) => void\n};\n\nexport const URLForm: React.FC<Props> = ({\n  isError,\n  errorMessage,\n  onChange,\n  currentUrl,\n  onSubmit,\n}) => {\n  return (\n    <form\n      action=\"\"\n      onSubmit={onSubmit}\n    >\n      <input\n        type=\"url\"\n        placeholder=\"Input URL to shrink\"\n        value={currentUrl}\n        onChange={e => onChange(e.target.value)}\n      />\n      <button type=\"submit\">Shrink</button>\n\n      <ErrorNotification isError={isError} message={errorMessage} />\n    </form>\n  );\n};\n","import React from 'react';\nimport './URLInfo.scss';\nimport { Link } from 'react-router-dom';\nimport { URL } from '../../types/URL';\n\ntype Props = {\n  url: URL\n  onRemove: (id: number) => void\n};\n\nexport const URLInfo: React.FC<Props> = ({ url, onRemove }) => {\n  const { fullUrl, shortUrl, id } = url;\n\n  return (\n    <tr>\n      <td className=\"fullUrl\"><a href={fullUrl}>{fullUrl}</a></td>\n      <td><a href={fullUrl}>{shortUrl}</a></td>\n      <td><Link to={`/${id}`}>More</Link></td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => onRemove(id)}\n        >\n          âœ–\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport './URLTable.scss';\nimport { URL } from '../../types/URL';\nimport { URLInfo } from '../URLInfo/URLInfo';\n\ntype Props = {\n  urls: URL[]\n  onRemove: (id: number) => void\n};\n\nexport const URLTable: React.FC<Props> = ({ urls, onRemove }) => {\n  return (\n    <table className=\"table\">\n      <tr>\n        <th>Full URL</th>\n        <th>Short URL</th>\n        <th>More</th>\n        <th>Remove</th>\n      </tr>\n\n      {urls.map(url => (\n        <URLInfo url={url} key={url.id} onRemove={onRemove} />\n      ))}\n    </table>\n  );\n};\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { Dna } from 'react-loader-spinner';\nimport { deleteLink, getAll, postOrPatchLink } from '../../api/links';\nimport { URL } from '../../types/URL';\nimport { URLForm } from '../../components/URLForm/URLForm';\nimport { URLTable } from '../../components/URLTable/URLTable';\nimport { shrinkURL } from '../../utils/shrinkURL';\n\nexport const URLShortener: React.FC = () => {\n  const [urlsFromServer, setUrlsFromServer] = useState<URL[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [currentURL, setCurrentURL] = useState('');\n\n  const showErrorMessage = (message: string) => {\n    setIsError(true);\n    setErrorMessage(message);\n\n    setTimeout(() => setIsError(false), 3000);\n  };\n\n  const getDataFromServer = async () => {\n    const data = await getAll();\n\n    if (data) {\n      setUrlsFromServer(data.value);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      getDataFromServer();\n    } catch (error) {\n      showErrorMessage('Unable to load URLs!');\n    }\n  }, []);\n\n  const handleRemoveClick = (urlId: number) => {\n    deleteLink(urlId)\n      .then(() => (\n        setUrlsFromServer(prevUrls => prevUrls.filter(url => url.id !== urlId))\n      ))\n      .catch(() => (\n        showErrorMessage('Unable to delete URL!')\n      ));\n  };\n\n  const visibleUrls = useMemo(() => {\n    return urlsFromServer;\n  }, [urlsFromServer]);\n\n  const isURLAlreadyShrinked = visibleUrls.some(url => url.fullUrl === currentURL);\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isURLAlreadyShrinked) {\n      showErrorMessage('URL is already shortened!');\n      setCurrentURL('');\n\n      return;\n    }\n\n    if (!currentURL.trim()) {\n      showErrorMessage('Please input your URL!');\n      setCurrentURL('');\n\n      return;\n    }\n\n    const shortURL = shrinkURL(currentURL);\n\n    const preparedData = {\n      id: 0,\n      fullUrl: currentURL,\n      shortUrl: shortURL,\n    };\n\n    setCurrentURL('');\n    postOrPatchLink(preparedData)\n      .then((addedUrl) => (\n        setUrlsFromServer(prev => [\n          ...prev,\n          addedUrl.value,\n        ])));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>URL Shortener</h1>\n      <URLForm\n        isError={isError}\n        errorMessage={errorMessage}\n        onChange={setCurrentURL}\n        currentUrl={currentURL}\n        onSubmit={handleFormSubmit}\n      />\n      {visibleUrls.length !== 0 ? (\n        <>\n          <URLTable urls={visibleUrls} onRemove={handleRemoveClick} />\n        </>\n      ) : (\n        <Dna\n          visible\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"dna-wrapper\"\n        />\n      )}\n    </div>\n  );\n};\n","export const shrinkURL = (url: string) => {\n  const shortURL = `short.ly/${url.replace(/[^a-z]/g, '').slice(-4)}`;\n\n  return shortURL;\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const About: React.FC = () => {\n  return (\n    <>\n      <h1>About</h1>\n      <Link to=\"/shortener\">Lets try!</Link>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Dna } from 'react-loader-spinner';\nimport { getLinkById } from '../../api/links';\nimport { dataFromServer } from '../../types/URL';\n\nexport const URLInfoPage: React.FC = () => {\n  const { id } = useParams();\n\n  const [currentUrl, setCurrentURL] = useState<dataFromServer| null>(null);\n\n  const loadInfo = async (UrlId: string | undefined) => {\n    if (id) {\n      const loadedUrlInfo = await getLinkById(UrlId);\n\n      setCurrentURL(loadedUrlInfo);\n    }\n  };\n\n  useEffect(() => {\n    loadInfo(id);\n  }, []);\n\n  // eslint-disable-next-line no-console\n  console.log(currentUrl);\n\n  return (\n    <>\n      {currentUrl ? (\n        <div>\n          <h1>URL Info page</h1>\n          <p>{currentUrl.value.fullUrl}</p>\n          <p>{currentUrl.value.shortUrl}</p>\n        </div>\n      ) : (\n        <Dna\n          visible\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"dna-wrapper\"\n        />\n      )}\n    </>\n\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { NotFoundPage } from './pages/NotFoundPage/NotFoundPage';\nimport { URLShortener } from './pages/URLShortener/URLShortener';\nimport { About } from './pages/About/About';\nimport { URLInfoPage } from './pages/URLInfoPage/URLInfoPage';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"container\">\n      <Routes>\n        <Route path=\"/\" element={<About />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"/shortener\" element={<URLShortener />} />\n        <Route path=\"/:id\" element={<URLInfoPage />} />\n      </Routes>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}